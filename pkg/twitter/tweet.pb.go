// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: tweet.proto

package twitter

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "github.com/gogo/protobuf/gogoproto"

import strings "strings"
import reflect "reflect"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

type Entities struct {
	Hashtags             []string `protobuf:"bytes,1,rep,name=Hashtags" json:"Hashtags,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Entities) Reset()      { *m = Entities{} }
func (*Entities) ProtoMessage() {}
func (*Entities) Descriptor() ([]byte, []int) {
	return fileDescriptor_tweet_9887634978260eab, []int{0}
}
func (m *Entities) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Entities) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Entities.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *Entities) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Entities.Merge(dst, src)
}
func (m *Entities) XXX_Size() int {
	return m.Size()
}
func (m *Entities) XXX_DiscardUnknown() {
	xxx_messageInfo_Entities.DiscardUnknown(m)
}

var xxx_messageInfo_Entities proto.InternalMessageInfo

func (m *Entities) GetHashtags() []string {
	if m != nil {
		return m.Hashtags
	}
	return nil
}

type User struct {
	ID                   string   `protobuf:"bytes,1,opt,name=ID,proto3" json:"ID,omitempty"`
	ScreenName           string   `protobuf:"bytes,2,opt,name=ScreenName,proto3" json:"ScreenName,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *User) Reset()      { *m = User{} }
func (*User) ProtoMessage() {}
func (*User) Descriptor() ([]byte, []int) {
	return fileDescriptor_tweet_9887634978260eab, []int{1}
}
func (m *User) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *User) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_User.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *User) XXX_Merge(src proto.Message) {
	xxx_messageInfo_User.Merge(dst, src)
}
func (m *User) XXX_Size() int {
	return m.Size()
}
func (m *User) XXX_DiscardUnknown() {
	xxx_messageInfo_User.DiscardUnknown(m)
}

var xxx_messageInfo_User proto.InternalMessageInfo

func (m *User) GetID() string {
	if m != nil {
		return m.ID
	}
	return ""
}

func (m *User) GetScreenName() string {
	if m != nil {
		return m.ScreenName
	}
	return ""
}

type Tweet struct {
	CreatedAt            uint64   `protobuf:"varint,1,opt,name=CreatedAt,proto3" json:"CreatedAt,omitempty"`
	ID                   string   `protobuf:"bytes,2,opt,name=ID,proto3" json:"ID,omitempty"`
	Text                 string   `protobuf:"bytes,3,opt,name=Text,proto3" json:"Text,omitempty"`
	User                 User     `protobuf:"bytes,4,opt,name=User" json:"User"`
	Entities             Entities `protobuf:"bytes,5,opt,name=Entities" json:"Entities"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Tweet) Reset()      { *m = Tweet{} }
func (*Tweet) ProtoMessage() {}
func (*Tweet) Descriptor() ([]byte, []int) {
	return fileDescriptor_tweet_9887634978260eab, []int{2}
}
func (m *Tweet) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Tweet) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Tweet.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *Tweet) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Tweet.Merge(dst, src)
}
func (m *Tweet) XXX_Size() int {
	return m.Size()
}
func (m *Tweet) XXX_DiscardUnknown() {
	xxx_messageInfo_Tweet.DiscardUnknown(m)
}

var xxx_messageInfo_Tweet proto.InternalMessageInfo

func (m *Tweet) GetCreatedAt() uint64 {
	if m != nil {
		return m.CreatedAt
	}
	return 0
}

func (m *Tweet) GetID() string {
	if m != nil {
		return m.ID
	}
	return ""
}

func (m *Tweet) GetText() string {
	if m != nil {
		return m.Text
	}
	return ""
}

func (m *Tweet) GetUser() User {
	if m != nil {
		return m.User
	}
	return User{}
}

func (m *Tweet) GetEntities() Entities {
	if m != nil {
		return m.Entities
	}
	return Entities{}
}

func init() {
	proto.RegisterType((*Entities)(nil), "Entities")
	proto.RegisterType((*User)(nil), "User")
	proto.RegisterType((*Tweet)(nil), "Tweet")
}
func (this *Entities) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Entities)
	if !ok {
		that2, ok := that.(Entities)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.Hashtags) != len(that1.Hashtags) {
		return false
	}
	for i := range this.Hashtags {
		if this.Hashtags[i] != that1.Hashtags[i] {
			return false
		}
	}
	return true
}
func (this *User) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*User)
	if !ok {
		that2, ok := that.(User)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.ID != that1.ID {
		return false
	}
	if this.ScreenName != that1.ScreenName {
		return false
	}
	return true
}
func (this *Tweet) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Tweet)
	if !ok {
		that2, ok := that.(Tweet)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.CreatedAt != that1.CreatedAt {
		return false
	}
	if this.ID != that1.ID {
		return false
	}
	if this.Text != that1.Text {
		return false
	}
	if !this.User.Equal(&that1.User) {
		return false
	}
	if !this.Entities.Equal(&that1.Entities) {
		return false
	}
	return true
}
func (this *Entities) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&twitter.Entities{")
	s = append(s, "Hashtags: "+fmt.Sprintf("%#v", this.Hashtags)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *User) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&twitter.User{")
	s = append(s, "ID: "+fmt.Sprintf("%#v", this.ID)+",\n")
	s = append(s, "ScreenName: "+fmt.Sprintf("%#v", this.ScreenName)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *Tweet) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 9)
	s = append(s, "&twitter.Tweet{")
	s = append(s, "CreatedAt: "+fmt.Sprintf("%#v", this.CreatedAt)+",\n")
	s = append(s, "ID: "+fmt.Sprintf("%#v", this.ID)+",\n")
	s = append(s, "Text: "+fmt.Sprintf("%#v", this.Text)+",\n")
	s = append(s, "User: "+strings.Replace(this.User.GoString(), `&`, ``, 1)+",\n")
	s = append(s, "Entities: "+strings.Replace(this.Entities.GoString(), `&`, ``, 1)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func valueToGoStringTweet(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}
func (m *Entities) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Entities) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Hashtags) > 0 {
		for _, s := range m.Hashtags {
			dAtA[i] = 0xa
			i++
			l = len(s)
			for l >= 1<<7 {
				dAtA[i] = uint8(uint64(l)&0x7f | 0x80)
				l >>= 7
				i++
			}
			dAtA[i] = uint8(l)
			i++
			i += copy(dAtA[i:], s)
		}
	}
	return i, nil
}

func (m *User) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *User) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.ID) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintTweet(dAtA, i, uint64(len(m.ID)))
		i += copy(dAtA[i:], m.ID)
	}
	if len(m.ScreenName) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintTweet(dAtA, i, uint64(len(m.ScreenName)))
		i += copy(dAtA[i:], m.ScreenName)
	}
	return i, nil
}

func (m *Tweet) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Tweet) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.CreatedAt != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintTweet(dAtA, i, uint64(m.CreatedAt))
	}
	if len(m.ID) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintTweet(dAtA, i, uint64(len(m.ID)))
		i += copy(dAtA[i:], m.ID)
	}
	if len(m.Text) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintTweet(dAtA, i, uint64(len(m.Text)))
		i += copy(dAtA[i:], m.Text)
	}
	dAtA[i] = 0x22
	i++
	i = encodeVarintTweet(dAtA, i, uint64(m.User.Size()))
	n1, err := m.User.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n1
	dAtA[i] = 0x2a
	i++
	i = encodeVarintTweet(dAtA, i, uint64(m.Entities.Size()))
	n2, err := m.Entities.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n2
	return i, nil
}

func encodeVarintTweet(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *Entities) Size() (n int) {
	var l int
	_ = l
	if len(m.Hashtags) > 0 {
		for _, s := range m.Hashtags {
			l = len(s)
			n += 1 + l + sovTweet(uint64(l))
		}
	}
	return n
}

func (m *User) Size() (n int) {
	var l int
	_ = l
	l = len(m.ID)
	if l > 0 {
		n += 1 + l + sovTweet(uint64(l))
	}
	l = len(m.ScreenName)
	if l > 0 {
		n += 1 + l + sovTweet(uint64(l))
	}
	return n
}

func (m *Tweet) Size() (n int) {
	var l int
	_ = l
	if m.CreatedAt != 0 {
		n += 1 + sovTweet(uint64(m.CreatedAt))
	}
	l = len(m.ID)
	if l > 0 {
		n += 1 + l + sovTweet(uint64(l))
	}
	l = len(m.Text)
	if l > 0 {
		n += 1 + l + sovTweet(uint64(l))
	}
	l = m.User.Size()
	n += 1 + l + sovTweet(uint64(l))
	l = m.Entities.Size()
	n += 1 + l + sovTweet(uint64(l))
	return n
}

func sovTweet(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozTweet(x uint64) (n int) {
	return sovTweet(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *Entities) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Entities{`,
		`Hashtags:` + fmt.Sprintf("%v", this.Hashtags) + `,`,
		`}`,
	}, "")
	return s
}
func (this *User) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&User{`,
		`ID:` + fmt.Sprintf("%v", this.ID) + `,`,
		`ScreenName:` + fmt.Sprintf("%v", this.ScreenName) + `,`,
		`}`,
	}, "")
	return s
}
func (this *Tweet) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Tweet{`,
		`CreatedAt:` + fmt.Sprintf("%v", this.CreatedAt) + `,`,
		`ID:` + fmt.Sprintf("%v", this.ID) + `,`,
		`Text:` + fmt.Sprintf("%v", this.Text) + `,`,
		`User:` + strings.Replace(strings.Replace(this.User.String(), "User", "User", 1), `&`, ``, 1) + `,`,
		`Entities:` + strings.Replace(strings.Replace(this.Entities.String(), "Entities", "Entities", 1), `&`, ``, 1) + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringTweet(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *Entities) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTweet
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Entities: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Entities: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Hashtags", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTweet
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTweet
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Hashtags = append(m.Hashtags, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTweet(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTweet
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *User) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTweet
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: User: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: User: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTweet
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTweet
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ScreenName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTweet
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTweet
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ScreenName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTweet(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTweet
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Tweet) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTweet
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Tweet: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Tweet: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreatedAt", wireType)
			}
			m.CreatedAt = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTweet
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CreatedAt |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTweet
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTweet
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Text", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTweet
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTweet
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Text = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field User", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTweet
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTweet
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.User.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Entities", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTweet
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTweet
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Entities.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTweet(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTweet
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipTweet(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowTweet
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTweet
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTweet
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthTweet
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowTweet
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipTweet(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthTweet = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowTweet   = fmt.Errorf("proto: integer overflow")
)

func init() { proto.RegisterFile("tweet.proto", fileDescriptor_tweet_9887634978260eab) }

var fileDescriptor_tweet_9887634978260eab = []byte{
	// 291 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x4c, 0x90, 0x31, 0x4f, 0xc2, 0x40,
	0x18, 0x86, 0xfb, 0x95, 0x56, 0xe9, 0x91, 0x38, 0xdc, 0x74, 0x21, 0xe6, 0xa3, 0xe9, 0x60, 0x9a,
	0x18, 0x4b, 0xa2, 0xd1, 0x5d, 0xc4, 0x44, 0x16, 0x87, 0x8a, 0x8b, 0x5b, 0x8b, 0x67, 0xe9, 0x00,
	0x35, 0xed, 0x47, 0x70, 0xf4, 0x27, 0xb8, 0xf9, 0x17, 0xfc, 0x29, 0x8c, 0x8c, 0x4e, 0xc6, 0x9e,
	0x8b, 0x23, 0x3f, 0xc1, 0x70, 0xc5, 0xc2, 0xf6, 0xbd, 0x4f, 0x9e, 0xbc, 0x79, 0xef, 0x58, 0x8b,
	0xe6, 0x52, 0x52, 0xf0, 0x9c, 0x67, 0x94, 0xb5, 0x4f, 0x92, 0x94, 0xc6, 0xb3, 0x38, 0x18, 0x65,
	0x93, 0x6e, 0x92, 0x25, 0x59, 0x57, 0xe3, 0x78, 0xf6, 0xa4, 0x93, 0x0e, 0xfa, 0xaa, 0x74, 0xef,
	0x88, 0x35, 0xaf, 0xa7, 0x94, 0x52, 0x2a, 0x0b, 0xde, 0x66, 0xcd, 0x9b, 0xa8, 0x18, 0x53, 0x94,
	0x14, 0x02, 0xdc, 0x86, 0xef, 0x84, 0x75, 0xf6, 0x2e, 0x98, 0x75, 0x5f, 0xc8, 0x9c, 0x1f, 0x30,
	0x73, 0xd0, 0x17, 0xe0, 0x82, 0xef, 0x84, 0xe6, 0xa0, 0xcf, 0x91, 0xb1, 0xbb, 0x51, 0x2e, 0xe5,
	0xf4, 0x36, 0x9a, 0x48, 0x61, 0x6a, 0xbe, 0x43, 0xbc, 0x77, 0x60, 0xf6, 0x70, 0x3d, 0x8f, 0x1f,
	0x32, 0xe7, 0x2a, 0x97, 0x11, 0xc9, 0xc7, 0x4b, 0xd2, 0x05, 0x56, 0xb8, 0x05, 0x9b, 0x5e, 0xb3,
	0xee, 0xe5, 0xcc, 0x1a, 0xca, 0x17, 0x12, 0x0d, 0x4d, 0xf4, 0xcd, 0x3b, 0xd5, 0x06, 0x61, 0xb9,
	0xe0, 0xb7, 0x4e, 0xed, 0x60, 0x1d, 0x7a, 0xd6, 0xe2, 0xab, 0x63, 0x84, 0xd5, 0xb8, 0xe3, 0xed,
	0x63, 0x84, 0xad, 0x25, 0x27, 0xf8, 0x07, 0x1b, 0xb1, 0x16, 0x7a, 0xe7, 0xcb, 0x12, 0x8d, 0xcf,
	0x12, 0x8d, 0x55, 0x89, 0xf0, 0xaa, 0x10, 0x3e, 0x14, 0xc2, 0x42, 0x21, 0x2c, 0x15, 0xc2, 0xb7,
	0x42, 0xf8, 0x55, 0x68, 0xac, 0x14, 0xc2, 0xdb, 0x0f, 0x1a, 0x0f, 0xfb, 0x34, 0x4f, 0x89, 0x64,
	0x1e, 0xef, 0xe9, 0x7f, 0x3b, 0xfb, 0x0b, 0x00, 0x00, 0xff, 0xff, 0x97, 0xcd, 0x6b, 0x52, 0x75,
	0x01, 0x00, 0x00,
}
